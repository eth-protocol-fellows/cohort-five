"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectionBasedLogToogler = void 0;
var vscode = require("vscode");
var SelectionBasedLogToogler = /** @class */ (function () {
    function SelectionBasedLogToogler(_document, _range) {
        this._document = _document;
        this._range = _range;
    }
    SelectionBasedLogToogler.prototype.toogleLoggers = function (loggers) {
        var e_1, _a;
        var logEnabled = !this._isWholeDocumentFormatting();
        try {
            for (var loggers_1 = __values(loggers), loggers_1_1 = loggers_1.next(); !loggers_1_1.done; loggers_1_1 = loggers_1.next()) {
                var logger = loggers_1_1.value;
                logger.setEnabled(logEnabled);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (loggers_1_1 && !loggers_1_1.done && (_a = loggers_1.return)) _a.call(loggers_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    SelectionBasedLogToogler.prototype._isWholeDocumentFormatting = function () {
        if (this._document.lineCount < 1)
            return true;
        var zeroPosition = new vscode.Position(0, 0);
        var documentEndPosition = this._document.lineAt(this._document.lineCount - 1).range.end;
        if (this._range.start.isEqual(zeroPosition) && this._range.end.isEqual(documentEndPosition))
            return true;
        return false;
    };
    return SelectionBasedLogToogler;
}());
exports.SelectionBasedLogToogler = SelectionBasedLogToogler;
